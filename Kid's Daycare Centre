#include <iostream>
#include <string>

const int MAX_CHILDREN = 20;

template <typename NameType, typename AgeType, typename ContactType>
class Child {
public:
    Child(const NameType& name, const AgeType& age, const ContactType& parentContact) :
        name(name), age(age), parentContact(parentContact) {}

    void displayDetails() const {
        std::cout << "Child Name: " << name << ", Age: " << age << ", Parent's Contact: " << parentContact << std::endl;
    }

private:
    NameType name;
    AgeType age;
    ContactType parentContact;
};

int main() {
    Child<std::string, int, std::string>* children[MAX_CHILDREN];
    int childCount = 0;

    int numChildren;
    std::cin >> numChildren;

    std::string name, parentContact;
    int age;

    for (int i = 0; i < numChildren; i++) {
        std::cin >> name >> age;
        std::cin >> parentContact;
        children[childCount++] = new Child<std::string, int, std::string>(name, age, parentContact);
    }

    if (childCount > 0) {
        std::cout << "Enrolled Children:" << std::endl;
        for (int i = 0; i < childCount; i++) {
            children[i]->displayDetails();
        }

        // Free allocated memory
        for (int i = 0; i < childCount; i++) {
            delete children[i];
        }
    } else {
        std::cout << "No children enrolled." << std::endl;
    }

    return 0;
}
